CREATE OR REPLACE PACKAGE PCG_XXBCM_ORDER AS
	PROCEDURE PROC_XXBCM_ORDER_CLEAR;
	PROCEDURE PROC_XXBCM_SUPPLIER;
	PROCEDURE PROC_XXBCM_TRANSACTION;
END PCG_XXBCM_ORDER;
/


CREATE OR REPLACE PACKAGE BODY PCG_XXBCM_ORDER AS
	PROCEDURE PROC_XXBCM_ORDER_CLEAR IS
			CURSOR CUR_XXBCM_ORDER IS
			SELECT *
			FROM XXBCM_ORDER_MGT;
			ORDER_DATA CUR_XXBCM_ORDER%ROWTYPE;
			VAR_ORDER_AMOUNT VARCHAR2(50);
		    VAR_INV_AMOUNT VARCHAR2(50);
			
		BEGIN
			OPEN CUR_XXBCM_ORDER;
			LOOP
				FETCH CUR_XXBCM_ORDER INTO ORDER_DATA;
				EXIT WHEN CUR_XXBCM_ORDER%NOTFOUND;
				
				
				IF INSTR(ORDER_DATA.ORDER_LINE_AMOUNT, 'I') > 0 THEN
					IF INSTR(ORDER_DATA.INVOICE_AMOUNT, 'I') > 0 THEN
						VAR_ORDER_AMOUNT := ORDER_DATA.ORDER_TOTAL_AMOUNT;
						VAR_INV_AMOUNT := ORDER_DATA.ORDER_TOTAL_AMOUNT;
					ELSE
						VAR_ORDER_AMOUNT := ORDER_DATA.INVOICE_AMOUNT;
						VAR_INV_AMOUNT := ORDER_DATA.INVOICE_AMOUNT;
					END IF;
				ELSE
					VAR_ORDER_AMOUNT := ORDER_DATA.ORDER_LINE_AMOUNT;
					VAR_INV_AMOUNT := ORDER_DATA.INVOICE_AMOUNT;
				END IF;
		
				INSERT INTO XXBCM_ORDER_MGT_CLR (
					ORDER_REF
					,ORDER_DATE
					,SUPPLIER_NAME
					,SUPP_CONTACT_NAME
					,SUPP_ADDRESS
					,SUPP_CONTACT_NUMBER
					,SUPP_EMAIL
					,ORDER_TOTAL_AMOUNT
					,ORDER_DESCRIPTION
					,ORDER_STATUS
					,ORDER_LINE_AMOUNT
					,INVOICE_REFERENCE
					,INVOICE_DATE
					,INVOICE_STATUS
					,INVOICE_HOLD_REASON
					,INVOICE_AMOUNT
					,INVOICE_DESCRIPTION
					)
				VALUES (
					ORDER_DATA.ORDER_REF             
					, ORDER_DATA.ORDER_DATE             
					, ORDER_DATA.SUPPLIER_NAME         
					, ORDER_DATA.SUPP_CONTACT_NAME     
					, ORDER_DATA.SUPP_ADDRESS          
					, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(ORDER_DATA.SUPP_CONTACT_NUMBER , 'I', '1') , 'S', '5') , 'o', '0') , '.', '') , ' ', '')
					, ORDER_DATA.SUPP_EMAIL              
					, REPLACE(REPLACE(REPLACE(ORDER_DATA.ORDER_TOTAL_AMOUNT, 'S', '5'), 'o', '0') , ',', '')
					, ORDER_DATA.ORDER_DESCRIPTION      
					, ORDER_DATA.ORDER_STATUS          
					, REPLACE(REPLACE(REPLACE(VAR_ORDER_AMOUNT, 'S', '5'), 'o', '0') , ',', '')
					, ORDER_DATA.INVOICE_REFERENCE      
					, ORDER_DATA.INVOICE_DATE     
					, ORDER_DATA.INVOICE_STATUS          
					, ORDER_DATA.INVOICE_HOLD_REASON    
					, REPLACE(REPLACE(REPLACE(VAR_INV_AMOUNT, 'S', '5'), 'o', '0') , ',', '')
					, ORDER_DATA.INVOICE_DESCRIPTION
				);
			END LOOP;
			CLOSE CUR_XXBCM_ORDER;
			COMMIT;
	END PROC_XXBCM_ORDER_CLEAR;
	
	
	PROCEDURE PROC_XXBCM_SUPPLIER IS
			CURSOR CUR_SUPPLIER IS
			SELECT DISTINCT
			 SUPPLIER_NAME
			,SUPP_CONTACT_NAME
			,SUPP_ADDRESS
			,SUPP_CONTACT_NUMBER
			,SUPP_EMAIL
			FROM XXBCM_ORDER_MGT_CLR;
			SUPPLIER_DATA CUR_SUPPLIER%ROWTYPE;
			VAR_NUM1 VARCHAR2(8);
			VAR_NUM2 VARCHAR2(8);
			VAR_TELEPHONE_NUM VARCHAR2(7);
			VAR_MOBILE_NUM VARCHAR2(8);
			VAR_STREET VARCHAR2(100);
			VAR_CITY VARCHAR2(100);
			VAR_COUNTRY VARCHAR2(100);
			VAR_FIRST_NAME VARCHAR2(100);
			VAR_LAST_NAME VARCHAR2(100);
		BEGIN
			OPEN CUR_SUPPLIER;
			LOOP
				FETCH CUR_SUPPLIER INTO SUPPLIER_DATA;
				EXIT WHEN CUR_SUPPLIER%NOTFOUND;
				IF INSTR(SUPPLIER_DATA.SUPP_CONTACT_NUMBER, ',') > 0 THEN
					VAR_NUM1 := SUBSTR(SUPPLIER_DATA.SUPP_CONTACT_NUMBER,1,INSTR(SUPPLIER_DATA.SUPP_CONTACT_NUMBER, ',', -1)-1);
					VAR_NUM2 := SUBSTR(SUPPLIER_DATA.SUPP_CONTACT_NUMBER, INSTR(SUPPLIER_DATA.SUPP_CONTACT_NUMBER, ',', -1)+1);
					IF LENGTH(VAR_NUM1) = 7 THEN
						VAR_TELEPHONE_NUM := VAR_NUM1;
					ELSIF LENGTH(VAR_NUM1) = 8 THEN
						VAR_MOBILE_NUM := VAR_NUM1;
					END IF;
					IF LENGTH(VAR_NUM2) = 7 THEN
						VAR_TELEPHONE_NUM := VAR_NUM2;
					ELSIF LENGTH(VAR_NUM2) = 8 THEN
						VAR_MOBILE_NUM := VAR_NUM2;
					END IF;
				ELSE
					IF LENGTH(SUPPLIER_DATA.SUPP_CONTACT_NUMBER) = 7 THEN
						VAR_TELEPHONE_NUM := SUPPLIER_DATA.SUPP_CONTACT_NUMBER;
					ELSIF LENGTH(SUPPLIER_DATA.SUPP_CONTACT_NUMBER) = 8 THEN
						VAR_MOBILE_NUM := SUPPLIER_DATA.SUPP_CONTACT_NUMBER;
					END IF;
				END IF;
				IF SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)+2) = 'Mauritius' THEN
					VAR_STREET := SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,1,INSTR(SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,1,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)-1), ',', -1)-1);
					VAR_CITY := SUBSTR(SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,1,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)-1),INSTR(SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,1,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)-1), ',', -1)+2);
					VAR_COUNTRY := SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)+2);
				ELSE
					VAR_STREET := SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,1,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)-1);
					VAR_CITY := SUBSTR(SUPPLIER_DATA.SUPP_ADDRESS,INSTR(SUPPLIER_DATA.SUPP_ADDRESS, ',', -1)+2);
					VAR_COUNTRY := 'Mauritius';
				END IF;
				VAR_FIRST_NAME := SUBSTR(SUPPLIER_DATA.SUPP_CONTACT_NAME,1,INSTR(SUPPLIER_DATA.SUPP_CONTACT_NAME, ' ',1)-1 );
				VAR_LAST_NAME := SUBSTR(SUPPLIER_DATA.SUPP_CONTACT_NAME,INSTR(SUPPLIER_DATA.SUPP_CONTACT_NAME, ' ', -1)+1);
				INSERT INTO XXBCM_SUPPLIER (
					SUPPLIER_NAME,
					FIRST_NAME,
					LAST_NAME,
					STREET,
					CITY,
					COUNTRY,
					TELEPHONE_NUMBER,
					MOBILE_NUMBER,
					EMAIL_ADDRESS
					) VALUES (
					SUPPLIER_DATA.SUPPLIER_NAME,
					VAR_FIRST_NAME,
					VAR_LAST_NAME,
					VAR_STREET,
					VAR_CITY,
					VAR_COUNTRY,
					VAR_TELEPHONE_NUM,
					VAR_MOBILE_NUM,
					SUPPLIER_DATA.SUPP_EMAIL
				);
			END LOOP;
			CLOSE CUR_SUPPLIER;
			COMMIT;
	END PROC_XXBCM_SUPPLIER;
	
	
	
PROCEDURE PROC_XXBCM_TRANSACTION IS
			CURSOR CUR_TRANSACTION IS
			SELECT
			ORDER_REF, 
			ORDER_DATE, 
			ORDER_TOTAL_AMOUNT, 
			ORDER_DESCRIPTION, 
			ORDER_STATUS, 
			ORDER_LINE_AMOUNT, 
			INVOICE_REFERENCE, 
			INVOICE_DATE, 
			INVOICE_STATUS, 
			INVOICE_HOLD_REASON, 
			INVOICE_AMOUNT, 
			INVOICE_DESCRIPTION,
			SUPPLIER_NAME
			FROM XXBCM_ORDER_MGT_CLR;
			TRANSACTION_DATA CUR_TRANSACTION%ROWTYPE;
			V_ORDER_DATE DATE;
			V_ORDER_TOTAL_AMT NUMBER(18);
			V_ORDER_LINE_AMT NUMBER(18);
			V_ORDER_REF VARCHAR(25);
			V_ORDER_DESCRIPTION VARCHAR2(300);
			V_ORDER_STATUS VARCHAR2(25);
			V_INV_DATE DATE;
			V_INV_AMT NUMBER(18);
			V_INV_REF VARCHAR(25);
			V_INV_DESCRIPTION VARCHAR2(300);
			V_INV_STATUS VARCHAR2(25);
			V_INV_HOLD_REASON VARCHAR2(200);
			V_SUPPLIER_NAME VARCHAR2(200);
		BEGIN
			OPEN CUR_TRANSACTION;
			LOOP
				FETCH CUR_TRANSACTION INTO TRANSACTION_DATA;
				EXIT WHEN CUR_TRANSACTION%NOTFOUND; 
				IF LENGTH(TRANSACTION_DATA.ORDER_DATE) = 11 THEN
					V_ORDER_DATE := TO_DATE(TRANSACTION_DATA.ORDER_DATE, 'DD-MON-YYYY');
				ELSIF LENGTH(TRANSACTION_DATA.ORDER_DATE) = 10 THEN
					V_ORDER_DATE := TO_DATE(TRANSACTION_DATA.ORDER_DATE, 'DD-MM-YYYY');
				END IF;
				IF TRANSACTION_DATA.ORDER_TOTAL_AMOUNT IS NOT NULL THEN
					V_ORDER_TOTAL_AMT := TO_NUMBER(TRANSACTION_DATA.ORDER_TOTAL_AMOUNT);
				ELSE
					V_ORDER_TOTAL_AMT := 0;
				END IF;
				IF TRANSACTION_DATA.ORDER_LINE_AMOUNT IS NOT NULL THEN
					V_ORDER_LINE_AMT := TO_NUMBER(TRANSACTION_DATA.ORDER_LINE_AMOUNT);
				ELSE
					V_ORDER_LINE_AMT := 0;
				END IF;
				V_ORDER_REF := TRANSACTION_DATA.ORDER_REF;
				V_ORDER_DESCRIPTION := TRANSACTION_DATA.ORDER_DESCRIPTION;
				V_ORDER_STATUS := TRANSACTION_DATA.ORDER_STATUS;
				V_SUPPLIER_NAME := TRANSACTION_DATA.SUPPLIER_NAME;
				IF LENGTH(TRANSACTION_DATA.INVOICE_DATE) = 11 THEN
					V_INV_DATE := TO_DATE(TRANSACTION_DATA.INVOICE_DATE, 'DD-MON-YYYY');
				ELSIF LENGTH(TRANSACTION_DATA.INVOICE_DATE) = 10 THEN
					V_INV_DATE := TO_DATE(TRANSACTION_DATA.INVOICE_DATE, 'DD-MM-YYYY');
				END IF;
				IF TRANSACTION_DATA.INVOICE_AMOUNT IS NOT NULL THEN
					V_INV_AMT := TO_NUMBER(TRANSACTION_DATA.INVOICE_AMOUNT);
				ELSE 
					V_INV_AMT := 0;
				END IF;
				V_INV_REF := TRANSACTION_DATA.INVOICE_REFERENCE;
				V_INV_DESCRIPTION := TRANSACTION_DATA.INVOICE_DESCRIPTION;
				V_INV_STATUS := TRANSACTION_DATA.INVOICE_STATUS;
				V_INV_HOLD_REASON := TRANSACTION_DATA.INVOICE_HOLD_REASON;
				V_SUPPLIER_NAME := TRANSACTION_DATA.SUPPLIER_NAME;
				INSERT INTO XXBCM_TRANSACTION (
					ORDER_REF,
					ORDER_DATE,
					TOTAL_AMT,
					ORDER_DESCRIPTION,
					ORDER_STATUS,
					LINE_AMT,
					INVOICE_REF,
					INVOICE_DATE,
					INVOICE_STATUS,
					INVOICE_HOLD_REASON,
					INVOICE_AMOUNT,
					INVOICE_DESCRIPTION,
					SUPPLIER_NAME
					) VALUES (
					V_ORDER_REF             
					, V_ORDER_DATE     
					, V_ORDER_TOTAL_AMT 
					, V_ORDER_DESCRIPTION 
					, V_ORDER_STATUS         
					, V_ORDER_LINE_AMT 
					, V_INV_REF
					, V_INV_DATE
					, V_INV_STATUS
					, V_INV_HOLD_REASON
					, V_INV_AMT
					, V_INV_DESCRIPTION
					, V_SUPPLIER_NAME);
			END LOOP;
			CLOSE CUR_TRANSACTION;
			COMMIT;
	END PROC_XXBCM_TRANSACTION;
END PCG_XXBCM_ORDER;
/